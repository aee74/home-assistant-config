esphome:
  name        : $devicename
  platform    : ESP8266
  board       : esp8285

wifi:
  ssid        : !secret wifi_ssid
  password    : !secret wifi_password
  ap:
    ssid      : "${devicelocation} Fallback Hotspot"
    password  : !secret wifi_fallback_password
  manual_ip:
    static_ip : ${ip_address}
    gateway   : !secret gateway_ip
    subnet    : 255.255.255.0

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

# Enable Web server.
web_server:
  port        : 80

# Sync time with Home Assistant.
time:
  - platform             : homeassistant
    id                   : homeassistant_time

sensor:
  # Sensors with general information.
  - platform             : uptime
    name                 : "${devicelocation} Uptime Sensor"
    update_interval      : 60s

  - platform             : wifi_signal
    name                 : "${devicelocation} WiFi Signal"
    update_interval      : 60s

  # Measure power
  - platform             : hlw8012
    sel_pin:
      number             : GPIO12
      inverted           : true
    cf_pin               : GPIO05
    cf1_pin              : GPIO14
    current_resistor     : ${current_res}
    voltage_divider      : ${voltage_div}
    # Current sensor
    current:
      name               : "${devicelocation} Current"
      unit_of_measurement: A
      accuracy_decimals  : 3
      icon               : mdi:flash-outline
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.06 -> 0.0
            - 0.475 -> 0.65
            - 1.8 -> 3.75
            - 1.97 -> 4.07
            - 2.92 -> 6.15
            - 4.22 -> 8.7
        # Make everything below 0.01A appear as just 0A.
        # Furthermore it corrects 0.013A for the power usage of the plug.
        - lambda: if (x < (0.01 - 0.005)) return 0; else return (x - 0.005);
    # Voltage sensor
    voltage:
      name               : "${devicelocation} Voltage"
      unit_of_measurement: V
      accuracy_decimals  : 1
      icon               : mdi:flash-outline
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 0.0
            - 237 -> 230
    power:
      name               : "${devicelocation} Power"
      id                 : powerSensor
      unit_of_measurement: W
      accuracy_decimals  : 0
      icon               : mdi:flash-outline
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.1 -> 0.0
            - 196 -> 105
            - 243 -> 260
            - 678 -> 700
            - 898 -> 940
            - 1908 -> 1985
        # Make everything below 2W appear as just 0W.
        # Furthermore it corrects 1.14W for the power usage of the plug.
        - lambda         : if (x < (2 + 0.5)) return 0; else return (x - 0.5);
    change_mode_every    : 4
    update_interval      : 10s

  - platform             : total_daily_energy
    name                 : "${devicelocation} Total Daily Energy"
    power_id             : powerSensor
    filters:
        # Multiplication factor from W to kW is 0.001
        - multiply       : 0.001
    unit_of_measurement  : kWh
    icon                 : mdi:clock-alert
 

binary_sensor:
  # Binary sensor for the button press
  - platform             : gpio
    id                   : button
    internal             : true
    pin:
      number             : GPIO13  # Button input
   #   inverted           : true    # Niet nodig omdat we toch alleen togglen?
    filters:
      - delayed_on       : 10ms
      - delayed_off      : 10ms
    on_press:
      - switch.toggle    : relay

switch:
  # Switch to restart the plug
  - platform             : restart
    name                 : "${devicelocation} Restart"

  # Switch to toggle the relay
  - platform             : gpio
    pin                  : GPIO15  # Relay output
    id                   : relay
    name                 : "${devicelocation} Relay"
    on_turn_on:
      - light.turn_on    : led
    on_turn_off:
      - light.turn_off   : led

light:
  # Light entity for state led
  - platform             : monochromatic
    name                 : "${devicelocation} State Led"
    id                   : led
    output               : state_led

output:
  # Physical output for state led
  - platform             : esp8266_pwm
    id                   : state_led
    pin:
      number             : GPIO02  # State led output
      inverted           : true

# Uses the red LED as a status indicator
status_led:
  pin:
    number               : GPIO00  # Red led output
    inverted             : true
